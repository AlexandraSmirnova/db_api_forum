__author__ = 'AS'
from common import DB_connect


def save_user(connect, username, about, name, email, optional):
    isAnonim = 0;
    if "isAnonymous" in optional:
        isAnonim = optional["isAnonymous"]
    str = DB_connect.update_query(connect,
                'INSERT INTO User (email, about, name, username, isAnonymous) VALUES (%s, %s, %s, %s, %s)', 
                (email, about, name, username, isAnonim, ))
    if str == "Exist":
        raise Exception("5")
    user = DB_connect.select_query(connect, 'Select  email, about, id, isAnonymous, name, username FROM User WHERE email = %s', (email, ) )
    return user_description(user)




def show_user(connect, email):
    user = DB_connect.select_query(connect, 'Select  email, about, id, isAnonymous, name, username FROM User WHERE email = %s', (email, ) )
    user = user_description(user)
    if user is None:
       raise Exception("User with email " + email +" doesn't exist ")
    user["followers"] = followers(connect, email, "user")
    user["following"] = followers(connect, email, "follow")
    return user

def follow_user(conect, follower, followee):
    is_deleted = 0
    str = DB_connect.update_query('INSERT INTO Follow (user, follow, is_deleted) VALUES (%s, %s, %s)', (follower, followee, is_deleted) )
    return 0
    
    

def user_description(user):
    user = user[0]
    response = {
        'email': user[0],
        'id': user[2],
        'isAnonimous': user[3],
        'name': user[4],
        'about': user[1],
        'username': user[5]
    }
    print(response)
    return response


def followers(connect, email, type):
    where = "user"
    if type == "user":
        where = "follow"
    f_list = DB_connect.select_query(connect,
        "SELECT " + type + " FROM Follow WHERE " + where + " = %s ", (email, )
    )
    return convert_to_list(f_list)


def convert_to_list(tuple):
    list = []
    for el in tuple:
        list.append(el[0])
    return list
